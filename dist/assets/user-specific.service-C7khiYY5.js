import{U as a,a as s}from"./user-subcollections.service-CNixqrxp.js";import{t as o,w as c,x as n}from"./firebase-vendor-D8A9P6qX.js";class m{static async createEmployee(e,t){return console.log("UserEmployeeService.createEmployee - dados recebidos:",{userId:e,employeeData:t}),a.addToUserSubcollection(e,s.EMPLOYEES,t)}static async getEmployees(e){console.log("UserEmployeeService.getEmployees - buscando funcionários para userId:",e);const t=await a.getAllFromUserSubcollection(e,s.EMPLOYEES,[o("createdAt","desc")]);return console.log("Funcionários encontrados:",t),t}static async getActiveEmployees(e){return a.getAllFromUserSubcollection(e,s.EMPLOYEES,[c("status","==","active"),o("createdAt","desc")])}static async updateEmployee(e,t,r){return a.updateUserSubcollection(e,s.EMPLOYEES,t,r)}static async deleteEmployee(e,t){return a.deleteFromUserSubcollection(e,s.EMPLOYEES,t)}}class y{static async createPlatform(e,t){return a.addToUserSubcollection(e,s.PLATFORMS,t)}static async getPlatforms(e){return a.getAllFromUserSubcollection(e,s.PLATFORMS,[o("name","asc")])}static async getActivePlatforms(e){return a.getAllFromUserSubcollection(e,s.PLATFORMS,[c("isActive","==",!0),o("name","asc")])}static async updatePlatform(e,t,r){return a.updateUserSubcollection(e,s.PLATFORMS,t,r)}static async deletePlatform(e,t){return a.deleteFromUserSubcollection(e,s.PLATFORMS,t)}}class A{static async createTransaction(e,t){return a.addToUserSubcollection(e,s.TRANSACTIONS,t)}static async getTransactions(e,t=100){return a.getAllFromUserSubcollection(e,s.TRANSACTIONS,[n(t)])}static async getTransactionsByDateRange(e,t,r){console.log("UserTransactionService.getTransactionsByDateRange - userId:",e),console.log("UserTransactionService.getTransactionsByDateRange - startDate:",t),console.log("UserTransactionService.getTransactionsByDateRange - endDate:",r);const i=await a.getAllFromUserSubcollection(e,s.TRANSACTIONS,[c("date",">=",t),c("date","<=",r)]);return console.log("UserTransactionService.getTransactionsByDateRange - transactions found:",i),i}static async getTransactionsByEmployee(e,t){return a.getAllFromUserSubcollection(e,s.TRANSACTIONS,[c("employeeId","==",t)])}static async updateTransaction(e,t,r){return a.updateUserSubcollection(e,s.TRANSACTIONS,t,r)}static async deleteTransaction(e,t){return a.deleteFromUserSubcollection(e,s.TRANSACTIONS,t)}}class U{static async createDailySummary(e,t){return a.addToUserSubcollection(e,s.DAILY_SUMMARIES,t)}static async getAllDailySummaries(e){console.log("UserDailySummaryService.getAllDailySummaries - userId:",e);const t=await a.getAllFromUserSubcollection(e,s.DAILY_SUMMARIES,[]);return console.log("UserDailySummaryService.getAllDailySummaries - summaries found:",t),t}static async updateDailySummary(e,t,r){return a.updateUserSubcollection(e,s.DAILY_SUMMARIES,t,r)}static async deleteDailySummary(e,t){return a.deleteFromUserSubcollection(e,s.DAILY_SUMMARIES,t)}static async getDailySummaries(e,t=30){return a.getAllFromUserSubcollection(e,s.DAILY_SUMMARIES,[o("date","desc"),n(t)])}static async getDailySummaryByDate(e,t){const r=await a.getAllFromUserSubcollection(e,s.DAILY_SUMMARIES,[c("date","==",t),n(1)]);return r.length>0?r[0]:null}}export{y as U,A as a,U as b,m as c};
