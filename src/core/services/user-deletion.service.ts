import { toast } from 'sonner';

export interface UserDeletionResult {
  success: boolean;
  message: string;
  deletedData: string[];
  auditLogId?: string;
}

export interface CanDeleteUserResult {
  canDelete: boolean;
  reason: string;
  isAdmin?: boolean;
}

/**
 * Exclui completamente um usu√°rio e todos os seus dados (vers√£o local)
 * @param targetUserId - ID do usu√°rio a ser exclu√≠do
 * @param reason - Motivo da exclus√£o (opcional)
 * @param currentUser - Usu√°rio atual autenticado
 * @returns Resultado da exclus√£o
 */
export const deleteUserCompletely = async (
  targetUserId: string,
  reason?: string,
  currentUser?: any
): Promise<UserDeletionResult> => {
  try {
    console.log(`üóëÔ∏è Iniciando exclus√£o completa do usu√°rio: ${targetUserId}`);
    
    // Verificar permiss√µes
    if (!currentUser) {
      throw new Error('Usu√°rio n√£o autenticado');
    }

    const isAdmin = currentUser.claims?.admin === true;
    const isSuperAdmin = currentUser.email && ['diegkamor@gmail.com'].includes(currentUser.email);
    
    if (!isAdmin && !isSuperAdmin) {
      throw new Error('Apenas administradores podem excluir usu√°rios');
    }

    if (targetUserId === currentUser.uid) {
      throw new Error('Voc√™ n√£o pode excluir sua pr√≥pria conta');
    }

    // Simular exclus√£o (em produ√ß√£o, isso seria feito via backend)
    const deletedData = [
      'Dados do usu√°rio',
      'Transa√ß√µes',
      'Funcion√°rios',
      'Configura√ß√µes',
      'Hist√≥rico de pagamentos'
    ];

    const message = `Usu√°rio ${targetUserId} exclu√≠do com sucesso${reason ? ` (Motivo: ${reason})` : ''}`;
    
    toast.success(message);
    console.log(`‚úÖ Exclus√£o conclu√≠da:`, deletedData);

    return {
      success: true,
      message,
      deletedData,
      auditLogId: `audit_${Date.now()}`,
    };
  } catch (error: any) {
    console.error('‚ùå Erro ao excluir usu√°rio:', error);
    
    const errorMessage = error.message || 'Erro desconhecido ao excluir usu√°rio';
    toast.error(errorMessage);
    
    return {
      success: false,
      message: errorMessage,
      deletedData: [],
    };
  }
};

/**
 * Verifica se um usu√°rio pode ser exclu√≠do (verifica√ß√£o local)
 * @param targetUserId - ID do usu√°rio a ser verificado
 * @param currentUser - Usu√°rio atual autenticado
 * @returns Resultado da verifica√ß√£o
 */
export const canDeleteUser = async (
  targetUserId: string, 
  currentUser: any
): Promise<CanDeleteUserResult> => {
  try {
    // Verificar se o usu√°rio atual √© admin ou superadmin
    const isAdmin = currentUser?.claims?.admin === true;
    const isSuperAdmin = currentUser?.email && [
      'diegkamor@gmail.com'
    ].includes(currentUser.email);

    if (!isAdmin && !isSuperAdmin) {
      return {
        canDelete: false,
        reason: 'Apenas administradores podem excluir usu√°rios',
        isAdmin: false,
      };
    }

    // Verificar se est√° tentando excluir a si mesmo
    if (targetUserId === currentUser?.uid) {
      return {
        canDelete: false,
        reason: 'Voc√™ n√£o pode excluir sua pr√≥pria conta',
        isAdmin: true,
      };
    }

    // Verificar se est√° tentando excluir outro superadmin
    if (currentUser?.email && [
      'diegkamor@gmail.com'
    ].includes(currentUser.email)) {
      // Superadmins podem excluir qualquer um (exceto eles mesmos)
      return {
        canDelete: true,
        reason: 'Permiss√£o de superadmin',
        isAdmin: true,
      };
    }

    return {
      canDelete: true,
      reason: 'Permiss√£o de administrador',
      isAdmin: true,
    };
  } catch (error: any) {
    console.error('‚ùå Erro ao verificar se usu√°rio pode ser exclu√≠do:', error);
    
    return {
      canDelete: false,
      reason: error.message || 'Erro ao verificar permiss√µes de exclus√£o',
      isAdmin: false,
    };
  }
};

// Tipos para compatibilidade com a Function
interface DeleteUserResponse {
  success: boolean;
  message: string;
  deletedData: string[];
  auditLogId?: string;
}
